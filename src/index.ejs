<%
var id = common.id;//pageIDを定義
-%>

<!DOCTYPE html>
<!--[if IE 8]><html lang="ja" class="ie ie8" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# mixi: http://mixi-platform.com/ns#"><![endif]-->
<!--[if IE 9]><html lang="ja" class="ie ie9" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# mixi: http://mixi-platform.com/ns#"><![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="ja" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# mixi: http://mixi-platform.com/ns#"><!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="content-language" content="ja">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="<%= common.description %>">
    <meta name="keywords" content="<%= common.keywords %>">
    <meta property="og:title" content="<%= common.ogtitle %>">
    <meta property="og:description" content="<%= common.ogdescription %>">
    <meta property="og:url" content="<%= common.ogurl %>">
    <meta property="og:image" content="<%= common.ogimage %>">
    <meta property="og:type" content="<%= common.ogtype %>">
    <title><%= common.title %></title>
    <link rel="canonical" href="">
    <link href="" rel="alternate" hreflang="ja">
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <!--  stylesheet  -->
    <link href='https://fonts.googleapis.com/css?family=Quicksand:400,300' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="/common/styles/styles.css">
    <!--  modernizr -->
    <script src="/common/scripts/modernizr.js"></script>
</head>
<body id="index">
<% include common/ejs_include/_header.ejs %>
<div id="container">
    <% include common/ejs_include/_share.ejs %>
    <section id="concept">
        <h2 class="hdg-lv2">concept</h2>
        <div class="row">
            <div class="col-sm-12">
                <h3 class="hdg-lv3"><sup class="icon-quote-left"></sup>柔軟に、そしてシンプルに<sub class="icon-quote-right"></sub></h3>
                <p class="txt-lead">
                    SLIMEは、静的なウェブサイトを効率よく安全に、かつ柔軟に制作するために<br class="hidden-xs">
                    柔軟性・拡張性と再利用性・効率化を両立した、緩やかなフレームワークです。
                </p>
            </div>
        </div>
        <div class="functions">
            <div class="row">
                <div class="col-sm-12">
                    <div class="col-xs-12 col-sm-3">
                        <div class="func-circle">
                            <p><i class="icon-puzzle"></i></p>
                            <p>Flexibility</p>
                        </div>
                        <p class="txt-lead">適用範囲を柔軟に選択することができ、プロジェクトにとって最適な形になります。</p>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="func-circle">
                            <p><i class="icon-cubes"></i></p>
                            <p>Scalability</p>
                        </div>
                        <p class="txt-lead">さまざまなパッケージを必要なときだけ採用するなど、多彩な拡張が可能です。</p>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="func-circle">
                            <p><i class="icon-recycle"></i></p>
                            <p>Reusability</p>
                        </div>
                        <p class="txt-lead">モジュールを意識して開発することで、車輪の再発明を抑えることができます。</p>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="func-circle">
                            <p><i class="icon-cog-alt"></i></p>
                            <p>Efficiency</p>
                        </div>
                        <p class="txt-lead">あらかじめ、またはそれぞれに設定できる自動化のタスクにより安全・効率的な開発を行えます。</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section id="download">
        <h2 class="hdg-lv2">download</h2>
        <p>さあ、始めましょう。導入方法は<a href="/documents/usage.html">こちら</a>から</p>
        <a href="https://bitbucket.org/croev/slime" target="_blank" class="btn-round">Download from Bitbucket</a>
        <p>Version 1.0 ・ MIT License</p>
    </section>
    <section id="documents">
        <h2 class="hdg-lv2">documentation</h2>
        <p>使い方やファイルの説明など，詳しくは<a href="/documents/">ドキュメント</a>をご確認ください</p>
        <a href="/documents" class="btn-round">Read the documentation</a>
    </section>
    <% include common/ejs_include/_share.ejs %>
</div>
<% include common/ejs_include/_footer.ejs %>
<!--  scripts include libraries  -->
<script src="/common/scripts/scripts.js"></script>
<!-- paper.js -->
<script src="/common/scripts/paper-full.min.js"></script>
<script type="text/paperscript" canvas="canvas">
    if (!(Modernizr.touch)){
        // Ported from original Metaball script by SATO Hiroyuki
        // http://park12.wakwak.com/~shp/lc/et/en_aics_script.html
        project.currentStyle = {
            fillColor: '#8EC31F'
        };

        var ballPositions = [[255, 129], [610, 73], [486, 363],
            [117, 459], [-70, 70], [843, 306], [789, 615], [1049, 82],
            [1292, 428], [1700, 55], [1352, 86], [1600, 400]];

        var handle_len_rate = 2.4;
        var circlePaths = [];
        var radius = 50;
        for (var i = 0, l = ballPositions.length; i < l; i++) {
            var circlePath = new Path.Circle({
                center: ballPositions[i],
                radius: 70
            });
            circlePaths.push(circlePath);
        }

        var largeCircle = new Path.Circle({
            center: [676, 433],
            radius: 100
        });
        circlePaths.push(largeCircle);

        function onMouseMove(event) {
            largeCircle.position = event.point;
            generateConnections(circlePaths);
        }

        var connections = new Group();
        function generateConnections(paths) {
            // Remove the last connection paths:
            connections.children = [];

            for (var i = 0, l = paths.length; i < l; i++) {
                for (var j = i - 1; j >= 0; j--) {
                    var path = metaball(paths[i], paths[j], 0.5, handle_len_rate, 300);
                    if (path) {
                        connections.appendTop(path);
                        path.removeOnMove();
                    }
                }
            }
        }

        generateConnections(circlePaths);

        // ---------------------------------------------
        function metaball(ball1, ball2, v, handle_len_rate, maxDistance) {
            var center1 = ball1.position;
            var center2 = ball2.position;
            var radius1 = ball1.bounds.width / 2;
            var radius2 = ball2.bounds.width / 2;
            var pi2 = Math.PI / 2;
            var d = center1.getDistance(center2);
            var u1, u2;

            if (radius1 == 0 || radius2 == 0)
                return;

            if (d > maxDistance || d <= Math.abs(radius1 - radius2)) {
                return;
            } else if (d < radius1 + radius2) { // case circles are overlapping
                u1 = Math.acos((radius1 * radius1 + d * d - radius2 * radius2) /
                        (2 * radius1 * d));
                u2 = Math.acos((radius2 * radius2 + d * d - radius1 * radius1) /
                        (2 * radius2 * d));
            } else {
                u1 = 0;
                u2 = 0;
            }

            var angle1 = (center2 - center1).getAngleInRadians();
            var angle2 = Math.acos((radius1 - radius2) / d);
            var angle1a = angle1 + u1 + (angle2 - u1) * v;
            var angle1b = angle1 - u1 - (angle2 - u1) * v;
            var angle2a = angle1 + Math.PI - u2 - (Math.PI - u2 - angle2) * v;
            var angle2b = angle1 - Math.PI + u2 + (Math.PI - u2 - angle2) * v;
            var p1a = center1 + getVector(angle1a, radius1);
            var p1b = center1 + getVector(angle1b, radius1);
            var p2a = center2 + getVector(angle2a, radius2);
            var p2b = center2 + getVector(angle2b, radius2);

            // define handle length by the distance between
            // both ends of the curve to draw
            var totalRadius = (radius1 + radius2);
            var d2 = Math.min(v * handle_len_rate, (p1a - p2a).length / totalRadius);

            // case circles are overlapping:
            d2 *= Math.min(1, d * 2 / (radius1 + radius2));

            radius1 *= d2;
            radius2 *= d2;

            var path = new Path({
                segments: [p1a, p2a, p2b, p1b],
                style: ball1.style,
                closed: true
            });
            var segments = path.segments;
            segments[0].handleOut = getVector(angle1a - pi2, radius1);
            segments[1].handleIn = getVector(angle2a + pi2, radius2);
            segments[2].handleOut = getVector(angle2b - pi2, radius2);
            segments[3].handleIn = getVector(angle1b + pi2, radius1);
            return path;
        }

        // ------------------------------------------------
        function getVector(radians, length) {
            return new Point({
                // Convert radians to degrees:
                angle: radians * 180 / Math.PI,
                length: length
            });
        }
    }
    </script>
</body>
</html>